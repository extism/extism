on: [pull_request, workflow_dispatch]

name: CI

env:
  RUNTIME_MANIFEST: runtime/Cargo.toml
  RUNTIME_CRATE: extism-runtime
  RUST_SDK_CRATE: extism

jobs:
  lib:
    name: Extism runtime lib
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust:
          - stable
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Cache Rust environment
        uses: Swatinem/rust-cache@v1
      - name: Cache libextism
        id: cache-libextism
        uses: actions/cache@v3
        with:
          path: target/release/libextism.*
          key: ${{ runner.os }}-libextism-${{ hashFiles('runtime/**') }}-${{ hashFiles('manifest/**') }}
      - name: Cache target
        id: cache-target
        uses: actions/cache@v3
        with:
          path: target/**
          key: ${{ runner.os }}-target-${{ env.GITHUB_SHA }}
      - name: Build
        if: steps.cache-libextism.outputs.cache-hit != 'true'
        shell: bash
        run: cargo build --release -p ${{ env.RUNTIME_CRATE }}
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: libextism-${{ matrix.os }}
          path: |
              target/release/libextism.*
  lint_and_test:
    name: Extism runtime lint and test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust:
          - stable
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Cache Rust environment
        uses: Swatinem/rust-cache@v1
      - name: Cache target
        id: cache-target
        uses: actions/cache@v3
        with:
          path: target/**
          key: ${{ runner.os }}-target-${{ env.GITHUB_SHA }}
      - name: Format
        run: cargo fmt --check -p ${{ env.RUNTIME_CRATE }}
      - name: Lint
        run: cargo clippy --release --all-features --no-deps -p ${{ env.RUNTIME_CRATE }}
      - name: Test
        run: cargo test --all-features --release -p ${{ env.RUNTIME_CRATE }}

  rust:
    name: Rust
    needs: lib
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust:
          - stable
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - uses: ./.github/actions/extism
      - name: Test Rust Host SDK
        run: LD_LIBRARY_PATH=/usr/local/lib cargo test --release -p ${{ env.RUST_SDK_CRATE }}

  elixir:
    name: Elixir
    needs: lib
    runs-on: ${{ matrix.os }}
    env:
      MIX_ENV: test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust:
          - stable
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - uses: ./.github/actions/extism
      - name: Setup Elixir Host SDK
        if: ${{ runner.os != 'macOS' }}
        uses: erlef/setup-beam@v1
        with:
          experimental-otp: true
          otp-version: '25.0.4'
          elixir-version: '1.14.0'

      - name: Test Elixir Host SDK
        if: ${{ runner.os != 'macOS' }}
        run: |
         cd elixir
         LD_LIBRARY_PATH=/usr/local/lib mix do deps.get, test

  go:
    name: Go
    needs: lib
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust:
          - stable
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - uses: ./.github/actions/extism
      - name: Setup Go env
        uses: actions/setup-go@v3

      - name: Test Go Host SDK
        run: |
          go version
          cd go
          LD_LIBRARY_PATH=/usr/local/lib go run main.go
          LD_LIBRARY_PATH=/usr/local/lib go test

  python:
    name: Python
    needs: lib
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust:
          - stable
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - uses: ./.github/actions/extism
      - name: Setup Python env
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          check-latest: true
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Test Python Host SDK
        run: |
          cd python
          poetry install
          poetry run python example.py
          poetry run python -m unittest discover

  ruby:
    name: Ruby
    needs: lib
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust:
          - stable
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - uses: ./.github/actions/extism
      - name: Setup Ruby env
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.0"

      - name: Test Ruby Host SDK
        run: |
          cd ruby
          bundle install
          ruby example.rb
          rake test

  node:
    name: Node
    needs: lib
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust:
          - stable
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - uses: ./.github/actions/extism
      - name: Setup Node env
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Test Node Host SDK
        run: |
          cd node
          npm i
          LD_LIBRARY_PATH=/usr/local/lib npm run build
          LD_LIBRARY_PATH=/usr/local/lib npm run example
          LD_LIBRARY_PATH=/usr/local/lib npm run test

  ocaml:
    name: OCaml
    needs: lib
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust:
          - stable
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - uses: ./.github/actions/extism
      - name: Setup OCaml env
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ocaml-base-compiler.5.0.0~beta1
      - name: Cache OCaml
        id: cache-ocaml
        uses: actions/cache@v3
        with:
          path: _build
          key: ${{ runner.os }}-ocaml-${{ hashFiles('ocaml/**') }}-${{ hashFiles('dune-project') }}
      - name: Build OCaml Host SDK
        if: steps.cache-ocaml.outputs.cache-hit != 'true'
        run: |
          cd ocaml
          LD_LIBRARY_PATH=/usr/local/lib opam exec -- dune build
      - name: Test OCaml Host SDK
        run: |
          opam install -y --deps-only .
          cd ocaml
          LD_LIBRARY_PATH=/usr/local/lib opam exec -- dune exec ./bin/main.exe
          LD_LIBRARY_PATH=/usr/local/lib opam exec -- dune runtest

  haskell:
    name: Haskell
    needs: lib
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust:
          - stable
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - uses: ./.github/actions/extism
      - name: Setup Haskell env
        uses: haskell/actions/setup@v2
        with:
          enable-stack: true
          stack-version: "latest"
      - name: Cache Haskell
        id: cache-haskell
        uses: actions/cache@v3
        with:
          path: .stack-work
          key: ${{ runner.os }}-haskell-${{ hashFiles('haskell/**') }}
      - name: Build Haskell Host SDK
        if: steps.cache-haskell.outputs.cache-hit != 'true'
        run: |
          cd haskell
          LD_LIBRARY_PATH=/usr/local/lib stack build
      - name: Test Haskell SDK
        run: |
          cd haskell
          LD_LIBRARY_PATH=/usr/local/lib stack test

  php:
    name: PHP
    needs: lib
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust:
          - stable
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - uses: ./.github/actions/extism
      - name: Setup PHP env
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.1"
          extensions: ffi
          tools: composer
        env:
          fail-fast: true

      - name: Test PHP SDK
        run: |
          cd php/example
          composer install
          php index.php

  cpp:
    name: C++
    needs: lib
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust:
          - stable
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - uses: ./.github/actions/extism
      - name: Install C++ SDK deps
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew install jsoncpp googletest pkg-config
      - name: Install C++ SDK deps
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get install g++ libjsoncpp-dev libgtest-dev pkg-config
      - name: Run C++ tests
        run: |
          cd cpp
          LD_LIBRARY_PATH=/usr/local/lib make example
          LD_LIBRARY_PATH=/usr/local/lib make test

  sdk_api_coverage:
    name: SDK API Coverage Report
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Setup Python env
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          check-latest: true
      - name: Install dependencies
        run: |
          sudo apt-get install ripgrep
          pip3 install pycparser
      - name: Run coverage script
        id: coverage
        run: |
          python scripts/sdk_coverage.py
