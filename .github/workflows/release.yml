on:
  workflow_dispatch:
    workflow: release-sdks
  release:
    types: [created]

name: Release

env:
  RUNTIME_MANIFEST: runtime/Cargo.toml
  RUNTIME_CRATE: extism-runtime
  RUSTFLAGS: -C target-feature=-crt-static
  ARTIFACT_DIR: release-artifacts

jobs:
  release-linux:
    name: linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          [
            aarch64-unknown-linux-gnu,
            aarch64-unknown-linux-musl,
            x86_64-unknown-linux-gnu,
          ]
          # i686-unknown-linux-gnu,
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Build Target (${{ matrix.target }})
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{ matrix.target }} -p ${{ env.RUNTIME_CRATE }}

      - name: Prepare Artifact
        run: |
          EXT=so
          SRC_DIR=target/${{ matrix.target }}/release
          DEST_DIR=${{ env.ARTIFACT_DIR }}
          RELEASE_NAME=libextism-${{ matrix.target }}-${{ github.ref_name }}
          ARCHIVE=${RELEASE_NAME}.tar.gz
          CHECKSUM=${RELEASE_NAME}.checksum.txt

          # compress the shared library & create checksum
          cp runtime/extism.h ${SRC_DIR}
          cp LICENSE ${SRC_DIR}
          tar -C ${SRC_DIR} -czvf ${ARCHIVE} libextism.${EXT} extism.h
          ls -ll ${ARCHIVE}
          shasum -a 256 ${ARCHIVE} > ${CHECKSUM}

          # copy archive and checksum into release artifact directory
          mkdir -p ${DEST_DIR}
          cp ${ARCHIVE} ${DEST_DIR}
          cp ${CHECKSUM} ${DEST_DIR}

          ls ${DEST_DIR}

      - name: Upload Artifact to Summary
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_DIR }}
          path: |
            *.tar.gz
            *.txt

      - name: Upload Artifact to Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.tar.gz
            *.txt

  release-macos:
    name: macos
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Build Target (${{ matrix.target }})
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{ matrix.target }} -p ${{ env.RUNTIME_CRATE }}

      - name: Prepare Artifact
        run: |
          EXT=dylib
          SRC_DIR=target/${{ matrix.target }}/release
          DEST_DIR=${{ env.ARTIFACT_DIR }}
          RELEASE_NAME=libextism-${{ matrix.target }}-${{ github.ref_name }}
          ARCHIVE=${RELEASE_NAME}.tar.gz
          CHECKSUM=${RELEASE_NAME}.checksum.txt

          # compress the shared library & create checksum
          cp runtime/extism.h ${SRC_DIR}
          cp LICENSE ${SRC_DIR}
          tar -C ${SRC_DIR} -czvf ${ARCHIVE} libextism.${EXT} extism.h
          ls -ll ${ARCHIVE}
          shasum -a 256 ${ARCHIVE} > ${CHECKSUM}

          # copy archive and checksum into release artifact directory
          mkdir -p ${DEST_DIR}
          cp ${ARCHIVE} ${DEST_DIR}
          cp ${CHECKSUM} ${DEST_DIR}

          ls ${DEST_DIR}

      - name: Upload Artifact to Summary
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_DIR }}
          path: |
            *.tar.gz
            *.txt

      - name: Upload Artifact to Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.tar.gz
            *.txt

  release-windows:
    name: windows
    runs-on: windows-latest
    strategy:
      matrix:
        target:
          [x86_64-pc-windows-gnu, x86_64-pc-windows-msvc]
          # i686-pc-windows-gnu,
          # i686-pc-windows-msvc,
          # aarch64-pc-windows-msvc
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Build Target (${{ matrix.target }})
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }} -p ${{ env.RUNTIME_CRATE }}

      - name: Prepare Artifact
        shell: bash
        run: |
          EXT=dll
          SRC_DIR=target/${{ matrix.target }}/release
          DEST_DIR=${{ env.ARTIFACT_DIR }}
          RELEASE_NAME=libextism-${{ matrix.target }}-${{ github.ref_name }}
          ARCHIVE=${RELEASE_NAME}.tar.gz
          CHECKSUM=${RELEASE_NAME}.checksum.txt

          # compress the shared library & create checksum
          cp runtime/extism.h ${SRC_DIR}
          cp LICENSE ${SRC_DIR}
          tar -C ${SRC_DIR} -czvf ${ARCHIVE} extism.${EXT} extism.h
          ls -ll ${ARCHIVE}

          certutil -hashfile ${ARCHIVE} SHA256 >${CHECKSUM}

          # copy archive and checksum into release artifact directory
          mkdir -p ${DEST_DIR}
          cp ${ARCHIVE} ${DEST_DIR}
          cp ${CHECKSUM} ${DEST_DIR}

          ls ${DEST_DIR}

      - name: Upload Artifact to Summary
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_DIR }}
          path: |
            *.tar.gz
            *.txt

      - name: Upload Artifact to Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.tar.gz
            *.txt

  release-sdks:
    needs: [release-linux, release-macos] # release-windows
    name: publish-sdks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node env
        uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: "https://registry.npmjs.org"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_API_TOKEN }}
          CI: true

      - name: Release Node Host SDK
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_API_TOKEN }}
          CI: true
        run: |
          cd node
          npm publish

      - name: Setup Rust env
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Release Rust Host SDK
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_API_TOKEN }}
        run: |
          # order of crate publication matter: manifest, runtime, rust

          cargo publish --manifest-path manifest/Cargo.toml
          # allow for crates.io to update so dependant crates can locate extism-manifest
          sleep 5 

          cargo publish --manifest-path runtime/Cargo.toml --no-verify
          cargo publish --manifest-path rust/Cargo.toml

      - name: Setup Elixir Host SDK
        uses: erlef/setup-beam@v1
        with:
          experimental-otp: true
          otp-version: '25.0.4'
          elixir-version: '1.14.0'

      - name: Publish Elixir Host SDK to hex.pm
        env:
          HEX_API_KEY: ${{ secrets.HEX_PM_API_TOKEN }}
        run: |
          cd elixir
          mix do deps.get, deps.compile
          mix hex.build
          mix hex.publish --yes

      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '3.1' # Version range or exact version of a Ruby version to use, using semvers version range syntax.

      - name: Publish Ruby Gem
        env:
          RUBYGEMS_API_KEY: ${{ secrets.RUBYGEMS_API_TOKEN }}
        run: |
          cd ruby
          gem build extism.gemspec
          gem push extism*.gem -k $RUBYGEMS_API_KEY
        
      - name: Publish Elixir Host SDK to hex.pm
        env:
          HEX_API_KEY: ${{ secrets.HEX_PM_API_TOKEN }}
        run: |
          cd elixir
          mix do deps.get, deps.compile
          mix hex.build
          mix hex.publish --yes

      - name: Setup Python env
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          check-latest: true

      - name: Build Python Host SDK
        run: |
          pushd python
          python3 -m pip install --upgrade build
          cp ../LICENSE .
          cp ../README.md .
          python3 -m poetry build
          popd

      - name: Release Python Host SDK
        uses: pypa/gh-action-pypi-publish@release/v1
        env:
          INPUT_VERIFY_METADATA: false
        with:
          user: ${{ secrets.PYPI_API_USER }}
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: python/dist/
